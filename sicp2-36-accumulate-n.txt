; SICP Exercise 2.36
;
; accumulate-n
;
; Version of accumulate that takes a
; sequence of sequences as 3rd arg
; and applies op to 1st element of each subsequence,
; then to 2nd element, then 3rd, etc.
; (all subsequences have eq number of elements),

(define nil '())

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))